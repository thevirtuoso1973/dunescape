#include "map.hpp"
#include "main.hpp"
#include "textureManager.hpp"
#include <algorithm>

const mapGrid lvl = {{ // these extra braces are needed
    {'}','}','}','}','}','}','}','}','}','}','}','}','}','}','}','}','}','}','}','}','}','}','}','}','}',},
    {'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',},
    {'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',},
    {'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',},
    {'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',},
    {'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',},
    {'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',},
    {'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',},
    {'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',},
    {'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',},
    {'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',},
    {'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',},
    {'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',},
    {'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',},
    {'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',},
    {'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',},
    {'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',},
    {'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',},
    {'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',},
    {'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',},
}};

Map::Map() {
  const SDL_Color brown = {0x99, 0x33, 0x00};
  const SDL_Color green = {0x00, 0xFF, 0x00};
  const SDL_Color blue = {0x00, 0x00, 0xFF};

  dirt = TextureManager::LoadTextureText(".", brown);
  grass = TextureManager::LoadTextureText(".", green);
  water = TextureManager::LoadTextureText("}", blue);

  LoadMap(lvl);

  src.x = src.y = 0;
  src.w = dest.w = 32;
  src.h = dest.h = 32;

  dest.x = dest.y = 0;
}

Map::~Map() {}

void Map::LoadMap(const mapGrid newMapArr) {
  std::copy(newMapArr.cbegin(), newMapArr.cend(), mapArray.begin());
}

void Map::DrawMap() {
  for (unsigned row = 0; row < mapArray.size(); ++row) {
    for (unsigned col = 0; col < mapArray[0].size(); ++col) {
      char type = mapArray[row][col];

      dest.x = col * 32;
      dest.y = row * 32;

      switch (type) {
      case '.':
        TextureManager::Draw(dirt, src, dest);
        break;
      case '}':
        TextureManager::Draw(water, src, dest);
        break;
      }
    }
  }
}
